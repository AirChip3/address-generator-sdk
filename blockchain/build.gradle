plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.bitcoinj:bitcoinj-core:0.15.10'
    implementation 'com.github.dogecoin:libdohj:v0.15'
    ext.kethereum_version = '0.86.0'
    implementation "com.github.walleth.kethereum:extensions_kotlin:$kethereum_version"
    implementation "com.github.walleth.kethereum:extensions_transactions:$kethereum_version"
    implementation "com.github.walleth.kethereum:erc55:$kethereum_version"
    implementation "com.github.walleth.kethereum:keccak_shortcut:$kethereum_version"
//    implementation "com.github.walleth.kethereum:wallet:$kethereum_version"
    implementation "com.github.walleth.kethereum:crypto_impl_spongycastle:$kethereum_version"
    implementation "com.github.walleth.kethereum:crypto:$kethereum_version"
    implementation "com.github.walleth.kethereum:crypto_api:$kethereum_version"
    implementation "com.github.walleth.kethereum:model:$kethereum_version"
//    implementation "com.github.walleth.kethereum:rlp:$kethereum_version"
//    implementation "com.github.walleth.kethereum:abi:$kethereum_version"
    implementation "com.github.walleth.kethereum:types:$kethereum_version"
    implementation "com.github.walleth.kethereum:erc712:$kethereum_version"
    implementation("com.google.guava:guava:32.1.3-android")
}
//Copy类型
task makeJar(type: Copy) {
    //删除存在的
    delete 'build/libs/blockchain_sdk.jar'
    //设置拷贝的文件
    // from('build/intermediates/bundles/release/')
    from('build/intermediates/aar_main_jar/release/')
    //打进jar包后的文件目录
    into('build/libs/')
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名
    rename ('classes.jar', 'blockchain_sdk.jar')
}


makeJar.dependsOn(build)
